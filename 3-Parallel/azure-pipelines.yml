trigger:
- none

pool:
  name: <YOUR AGENT POOL>

stages:
- stage: PJobs
  displayName: Parallel with jobs
  jobs:
  - job: Random1
    displayName: Get Random Number
    steps:
      - task: PowerShell@2
        name: GetRandom
        inputs:
          targetType: 'inline'
          script: 'Write-Host "##vso[task.setvariable variable=r;isOutput=true]$(Get-Random)"'
  - job: Random2
    displayName: Get Random Number
    steps:
      - task: PowerShell@2
        name: GetRandom
        inputs:
          targetType: 'inline'
          script: 'Write-Host "##vso[task.setvariable variable=r;isOutput=true]$(Get-Random)"'
  - job: Random3
    displayName: Get Random Number
    steps:
      - task: PowerShell@2
        name: GetRandom
        inputs:
          targetType: 'inline'
          script: 'Write-Host "##vso[task.setvariable variable=r;isOutput=true]$(Get-Random)"'
  - job: Random4
    displayName: Get Random Number
    steps:
      - task: PowerShell@2
        name: GetRandom
        inputs:
          targetType: 'inline'
          script: 'Write-Host "##vso[task.setvariable variable=r;isOutput=true]$(Get-Random)"'
  - job: Random5
    displayName: Get Random Number
    steps:
      - task: PowerShell@2
        name: GetRandom
        inputs:
          targetType: 'inline'
          script: 'Write-Host "##vso[task.setvariable variable=r;isOutput=true]$(Get-Random)"'
  - job: Print
    displayName: Print Numbers
    dependsOn:
    - Random1
    - Random2
    - Random3
    - Random4
    - Random5
    variables:
      - name: random_one
        value: $[ dependencies.Random1.outputs['GetRandom.r'] ]
      - name: random_two
        value: $[ dependencies.Random2.outputs['GetRandom.r'] ]
      - name: random_three
        value: $[ dependencies.Random3.outputs['GetRandom.r'] ]
      - name: random_four
        value: $[ dependencies.Random4.outputs['GetRandom.r'] ]
      - name: random_five
        value: $[ dependencies.Random5.outputs['GetRandom.r'] ]
    steps:
    - task: PowerShell@2
      name: PrintRandom
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Value1 = $(random_one)"
          Write-Host "Value2 = $(random_two)"
          Write-Host "Value3 = $(random_three)"
          Write-Host "Value4 = $(random_four)"
          Write-Host "Value5 = $(random_five)"

- stage: MJobs
  displayName: Parallel with matrix
  jobs:
  - job: Random
    strategy:
      matrix:
        Num1:
          outputvar: random1
        Num2:
          outputvar: random2
        Num3:
          outputvar: random3
        Num4:
          outputvar: random4
        Num5:
          outputvar: random5
    displayName: Get Random Number
    steps:
    - task: PowerShell@2
      name: GetRandom
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "##vso[task.setvariable variable=$(outputvar);isOutput=true]$(Get-Random)"
  - job: Print
    displayName: Print Numbers
    dependsOn:
    - Random
    variables:
      - name: random_one
        value: $[ dependencies.Random.outputs['Num1.GetRandom.random1'] ]
      - name: random_two
        value: $[ dependencies.Random.outputs['Num2.GetRandom.random2'] ]
      - name: random_three
        value: $[ dependencies.Random.outputs['Num3.GetRandom.random3'] ]
      - name: random_four
        value: $[ dependencies.Random.outputs['Num4.GetRandom.random4'] ]
      - name: random_five
        value: $[ dependencies.Random.outputs['Num5.GetRandom.random5'] ]
    steps:
      - task: PowerShell@2
        name: PrintRandom
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Value1 = $(random_one)"
            Write-Host "Value2 = $(random_two)"
            Write-Host "Value3 = $(random_three)"
            Write-Host "Value4 = $(random_four)"
            Write-Host "Value5 = $(random_five)"

- stage: GJobs
  displayName: Parallel with matrix generated by Powershell 
  jobs:
  - job: CreateQueue
    displayName: Create azure storage queue
    steps:
      - task: AzurePowerShell@5
        name: CreateQueue
        inputs:
          azureSubscription: '<YOUR SERIVICE CONNECTION>'
          ScriptType: 'InlineScript'
          Inline: |
            $queuename = "testqueue$(Get-Random)"
            
            $sa = Get-AzStorageAccount -Name "<YOUR STORAGE ACCOUNT NAME>" -ResourceGroupName "<YOUR RESOURCEGROUP NAME>"
            
            New-AzStorageQueue -Name $queuename -Context $sa.context
            
            Write-Host "##vso[task.setvariable variable=queuename;isOutput=true]$queuename"
          preferredAzurePowerShellVersion: 'LatestVersion'
          pwsh: true
  - job: CreateList
    displayName: Create list of jobs
    steps:
    - task: PowerShell@2
      name: CreateList
      inputs:
        targetType: 'inline'
        script: |
          $list = @{}
          1..5 | Foreach {Add-Member -InputObject $list -MemberType NoteProperty -Name "Num$($_)" -Value @{"num"="$_"}}
          Write-Host "##vso[task.setvariable variable=list;isOutput=true]$($list | Select-Object Num* | ConvertTo-Json -Compress)"
  - job: Random
    strategy:
      matrix: $[ dependencies.CreateList.outputs['CreateList.list'] ]
    displayName: Get Random Number
    dependsOn:
    - CreateQueue
    - CreateList
    variables:
    - name: queuename
      value: $[ dependencies.CreateQueue.outputs['CreateQueue.queuename'] ]
    steps:
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: '<YOUR SERIVICE CONNECTION>'
        ScriptType: 'InlineScript'
        Inline: |
          $sa = Get-AzStorageAccount -Name "<YOUR STORAGE ACCOUNT NAME>" -ResourceGroupName "<YOUR RESOURCEGROUP NAME>"
          $q = Get-AzStorageQueue -Name "$(queuename)" -Context $sa.context
          $queueMessage = [Microsoft.Azure.Storage.Queue.CloudQueueMessage]::new("Value$(num) = $(Get-Random)")
          $q.CloudQueue.AddMessage($queueMessage)
        preferredAzurePowerShellVersion: 'LatestVersion'
        pwsh: true
  - job: Print
    displayName: Print Numbers
    dependsOn:
    - Random
    variables:
    - name: queuename
      value: $[ dependencies.CreateQueue.outputs['CreateQueue.queuename'] ]
    steps:
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: '<YOUR SERIVICE CONNECTION>'
        ScriptType: 'InlineScript'
        Inline: |
          $sa = Get-AzStorageAccount -Name "<YOUR STORAGE ACCOUNT NAME>" -ResourceGroupName "<YOUR RESOURCEGROUP NAME>"
          $q = Get-AzStorageQueue -Name "$(queuename)" -Context $sa.context
          do{
          $invisibleTimeout = [System.TimeSpan]::FromSeconds(10)
          $message = $q.CloudQueue.GetMessageAsync($invisibleTimeout,$null,$null)
          if($message.Result){
          Write-Host $message.Result.AsString
          $null = $q.CloudQueue.DeleteMessageAsync($message.Result.Id,$message.Result.popReceipt)
          }
          }while($message.Result -ne $null)
        preferredAzurePowerShellVersion: 'LatestVersion'
        pwsh: true
  - job: DeleteQueue
    displayName: Delete azure storage queue
    dependsOn:
    - Print
    - CreateQueue
    variables:
    - name: queuename
      value: $[ dependencies.CreateQueue.outputs['CreateQueue.queuename'] ]
    condition: always()
    steps:
      - task: AzurePowerShell@5
        inputs:
          azureSubscription: '<YOUR SERIVICE CONNECTION>'
          ScriptType: 'InlineScript'
          Inline: |
            $sa = Get-AzStorageAccount -Name "<YOUR STORAGE ACCOUNT NAME>" -ResourceGroupName "<YOUR RESOURCEGROUP NAME>"
            
            Remove-AzStorageQueue -Name "$(queuename)" -Context $sa.context -Force
          azurePowerShellVersion: 'LatestVersion'
          pwsh: true